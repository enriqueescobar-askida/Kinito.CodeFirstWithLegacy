// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ConfigurationContext
{
    using Entities;
    using Interfaces;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.32.0.0")]
    public class FakeNorthwindDbContext : INorthwindDbContext
    {
        public System.Data.Entity.DbSet<Category> Categories { get; set; }
        public System.Data.Entity.DbSet<Customer> Customers { get; set; }
        public System.Data.Entity.DbSet<CustomerDemographic> CustomerDemographics { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<Engineer> Engineers { get; set; }
        public System.Data.Entity.DbSet<EngineerOrder> EngineerOrders { get; set; }
        public System.Data.Entity.DbSet<EngineerOrderItem> EngineerOrderItems { get; set; }
        public System.Data.Entity.DbSet<GeographyType> GeographyTypes { get; set; }
        public System.Data.Entity.DbSet<Order> Orders { get; set; }
        public System.Data.Entity.DbSet<OrderDetail> OrderDetails { get; set; }
        public System.Data.Entity.DbSet<Product> Products { get; set; }
        public System.Data.Entity.DbSet<Region> Regions { get; set; }
        public System.Data.Entity.DbSet<Shipper> Shippers { get; set; }
        public System.Data.Entity.DbSet<Supplier> Suppliers { get; set; }
        public System.Data.Entity.DbSet<Territory> Territories { get; set; }
        public System.Data.Entity.DbSet<ViewAlphabeticalListOfProduct> ViewAlphabeticalListOfProducts { get; set; }
        public System.Data.Entity.DbSet<ViewCategorySalesFor1997> ViewCategorySalesFor1997 { get; set; }
        public System.Data.Entity.DbSet<ViewCurrentProductList> ViewCurrentProductLists { get; set; }
        public System.Data.Entity.DbSet<ViewCustomerAndSuppliersByCity> ViewCustomerAndSuppliersByCities { get; set; }
        public System.Data.Entity.DbSet<ViewInvoice> ViewInvoices { get; set; }
        public System.Data.Entity.DbSet<ViewOrderDetailsExtended> ViewOrderDetailsExtendeds { get; set; }
        public System.Data.Entity.DbSet<ViewOrdersQry> ViewOrdersQries { get; set; }
        public System.Data.Entity.DbSet<ViewOrderSubtotal> ViewOrderSubtotals { get; set; }
        public System.Data.Entity.DbSet<ViewProductsAboveAveragePrice> ViewProductsAboveAveragePrices { get; set; }
        public System.Data.Entity.DbSet<ViewProductSalesFor1997> ViewProductSalesFor1997 { get; set; }
        public System.Data.Entity.DbSet<ViewProductsByCategory> ViewProductsByCategories { get; set; }
        public System.Data.Entity.DbSet<ViewSalesByCategory> ViewSalesByCategories { get; set; }
        public System.Data.Entity.DbSet<ViewSalesTotalsByAmount> ViewSalesTotalsByAmounts { get; set; }
        public System.Data.Entity.DbSet<ViewSummaryOfSalesByQuarter> ViewSummaryOfSalesByQuarters { get; set; }
        public System.Data.Entity.DbSet<ViewSummaryOfSalesByYear> ViewSummaryOfSalesByYears { get; set; }

        public FakeNorthwindDbContext()
        {
            Categories = new FakeDbSet<Category>("CategoryId");
            Customers = new FakeDbSet<Customer>("CustomerId");
            CustomerDemographics = new FakeDbSet<CustomerDemographic>("CustomerTypeId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            Engineers = new FakeDbSet<Engineer>("EngineerId");
            EngineerOrders = new FakeDbSet<EngineerOrder>("EngineerOrderId");
            EngineerOrderItems = new FakeDbSet<EngineerOrderItem>("EngineerOrderItemId");
            GeographyTypes = new FakeDbSet<GeographyType>("Id");
            Orders = new FakeDbSet<Order>("OrderId");
            OrderDetails = new FakeDbSet<OrderDetail>("OrderId", "ProductId");
            Products = new FakeDbSet<Product>("ProductId");
            Regions = new FakeDbSet<Region>("RegionId");
            Shippers = new FakeDbSet<Shipper>("ShipperId");
            Suppliers = new FakeDbSet<Supplier>("SupplierId");
            Territories = new FakeDbSet<Territory>("TerritoryId");
            ViewAlphabeticalListOfProducts = new FakeDbSet<ViewAlphabeticalListOfProduct>("ProductId", "ProductName", "Discontinued", "CategoryName");
            ViewCategorySalesFor1997 = new FakeDbSet<ViewCategorySalesFor1997>("CategoryName");
            ViewCurrentProductLists = new FakeDbSet<ViewCurrentProductList>("ProductId", "ProductName");
            ViewCustomerAndSuppliersByCities = new FakeDbSet<ViewCustomerAndSuppliersByCity>("CompanyName", "Relationship");
            ViewInvoices = new FakeDbSet<ViewInvoice>("CustomerName", "Salesperson", "OrderId", "ShipperName", "ProductId", "ProductName", "UnitPrice", "Quantity", "Discount");
            ViewOrderDetailsExtendeds = new FakeDbSet<ViewOrderDetailsExtended>("OrderId", "ProductId", "ProductName", "UnitPrice", "Quantity", "Discount");
            ViewOrdersQries = new FakeDbSet<ViewOrdersQry>("OrderId", "CompanyName");
            ViewOrderSubtotals = new FakeDbSet<ViewOrderSubtotal>("OrderId");
            ViewProductsAboveAveragePrices = new FakeDbSet<ViewProductsAboveAveragePrice>("ProductName");
            ViewProductSalesFor1997 = new FakeDbSet<ViewProductSalesFor1997>("CategoryName", "ProductName");
            ViewProductsByCategories = new FakeDbSet<ViewProductsByCategory>("CategoryName", "ProductName", "Discontinued");
            ViewSalesByCategories = new FakeDbSet<ViewSalesByCategory>("CategoryId", "CategoryName", "ProductName");
            ViewSalesTotalsByAmounts = new FakeDbSet<ViewSalesTotalsByAmount>("OrderId", "CompanyName");
            ViewSummaryOfSalesByQuarters = new FakeDbSet<ViewSummaryOfSalesByQuarter>("OrderId");
            ViewSummaryOfSalesByYears = new FakeDbSet<ViewSummaryOfSalesByYear>("OrderId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public System.Collections.Generic.List<ProcedureCustOrderHistReturnModel> ProcedureCustOrderHist(string customerId)
        {
            int procResult;
            return ProcedureCustOrderHist(customerId, out procResult);
        }

        public System.Collections.Generic.List<ProcedureCustOrderHistReturnModel> ProcedureCustOrderHist(string customerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ProcedureCustOrderHistReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ProcedureCustOrderHistReturnModel>> ProcedureCustOrderHistAsync(string customerId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ProcedureCustOrderHist(customerId, out procResult));
        }

        public System.Collections.Generic.List<ProcedureCustOrdersDetailReturnModel> ProcedureCustOrdersDetail(int? orderId)
        {
            int procResult;
            return ProcedureCustOrdersDetail(orderId, out procResult);
        }

        public System.Collections.Generic.List<ProcedureCustOrdersDetailReturnModel> ProcedureCustOrdersDetail(int? orderId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ProcedureCustOrdersDetailReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ProcedureCustOrdersDetailReturnModel>> ProcedureCustOrdersDetailAsync(int? orderId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ProcedureCustOrdersDetail(orderId, out procResult));
        }

        public System.Collections.Generic.List<ProcedureCustOrdersOrdersReturnModel> ProcedureCustOrdersOrders(string customerId)
        {
            int procResult;
            return ProcedureCustOrdersOrders(customerId, out procResult);
        }

        public System.Collections.Generic.List<ProcedureCustOrdersOrdersReturnModel> ProcedureCustOrdersOrders(string customerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ProcedureCustOrdersOrdersReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ProcedureCustOrdersOrdersReturnModel>> ProcedureCustOrdersOrdersAsync(string customerId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ProcedureCustOrdersOrders(customerId, out procResult));
        }

        public System.Collections.Generic.List<ProcedureEmployeeSalesByCountryReturnModel> ProcedureEmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return ProcedureEmployeeSalesByCountry(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<ProcedureEmployeeSalesByCountryReturnModel> ProcedureEmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ProcedureEmployeeSalesByCountryReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ProcedureEmployeeSalesByCountryReturnModel>> ProcedureEmployeeSalesByCountryAsync(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ProcedureEmployeeSalesByCountry(beginningDate, endingDate, out procResult));
        }

        public System.Collections.Generic.List<ProcedureSalesByYearReturnModel> ProcedureSalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return ProcedureSalesByYear(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<ProcedureSalesByYearReturnModel> ProcedureSalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ProcedureSalesByYearReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ProcedureSalesByYearReturnModel>> ProcedureSalesByYearAsync(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ProcedureSalesByYear(beginningDate, endingDate, out procResult));
        }

        public System.Collections.Generic.List<ProcedureSalesByCategoryReturnModel> ProcedureSalesByCategory(string categoryName, string ordYear)
        {
            int procResult;
            return ProcedureSalesByCategory(categoryName, ordYear, out procResult);
        }

        public System.Collections.Generic.List<ProcedureSalesByCategoryReturnModel> ProcedureSalesByCategory(string categoryName, string ordYear, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ProcedureSalesByCategoryReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ProcedureSalesByCategoryReturnModel>> ProcedureSalesByCategoryAsync(string categoryName, string ordYear)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ProcedureSalesByCategory(categoryName, ordYear, out procResult));
        }

        public System.Collections.Generic.List<ProcedureTenMostExpensiveProductsReturnModel> ProcedureTenMostExpensiveProducts()
        {
            int procResult;
            return ProcedureTenMostExpensiveProducts(out procResult);
        }

        public System.Collections.Generic.List<ProcedureTenMostExpensiveProductsReturnModel> ProcedureTenMostExpensiveProducts(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ProcedureTenMostExpensiveProductsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ProcedureTenMostExpensiveProductsReturnModel>> ProcedureTenMostExpensiveProductsAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ProcedureTenMostExpensiveProducts(out procResult));
        }

        // Table Valued Functions
        [System.Data.Entity.DbFunction("NorthwindDbContext", "CsvToInt")]
        public IQueryable<ProcedureCsvToIntReturnModel> ProcedureCsvToInt(string array)
        {
            return new System.Collections.Generic.List<ProcedureCsvToIntReturnModel>().AsQueryable();
        }

    }
}
// </auto-generated>
